<?php

/**
 * @file
 * It will run  and update the database.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function advance_currency_converter_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the custom_configuration module.
    case 'help.page.advance_currency_converter':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('This will provide you conversion of the currency with another currency.') . '</p>';
      $output .= '<p>' . t('You can select either google currency API or Data Offline Handling.') . '</p>';
      $output .= '<p>' . t('Step 1. You have to install the module and enable it.') . '</p>';
      $output .= '<p>' . t('Step 2. Place a "Currency Converter block" Block using Block layout.') . '</p>';
      $output .= '<p>' . t('Step 3. If you use a Data Offline handling then you will have to run the cron manually.') . '</p>';
      $output .= '<p>' . t('Step 4. You can set the number of days data, you want to store in database.') . '</p>';
      $output .= '<p>' . t('Step 5. But if you are using a graph service then recommended, you to save a continuous data in database less than 5 days.') . '</p>';
      $output .= '<p>' . t('Step 6. hook_cron will run in interval if you want to show the updated value from Database.') . '</p>';
      $output .= '<p>' . t('Step 7. Cron will only update the database when you have selected Data offline handling in configuration page.') . '</p>';
      $output .= '<p>' . t('Step 8. You have to run cron manually everyday to update your database only if you have disable the automatically cron run.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_cron().
 */
function advance_currency_converter_cron() {
  // Checking whether the user database selection or not.
  $selection = \Drupal::config('currency.converter')->get('selection');
  $days = \Drupal::config('currency.converter')->get('days');
  if ($selection == 'Data Offline Handling') {
    // Connection creation.
    $con = \Drupal::database();
    // Calling a service to load all the currency code and
    // name which is in currency converter.
    $service = \Drupal::service('currency.fetch_data');
    $options = $service->getInfo();
    // Fetching data if it is available or not.
    $date_array = $con->select('currency_offlne_data', 'cod')
      ->fields('cod', ['date'])
      ->groupBy('date')
      ->orderBy('date', 'DESC')
      ->range(0, $days)
      ->execute()
      ->fetchAll(PDO::FETCH_COLUMN);

    $result = $con->select('currency_offlne_data', 'c')
      ->fields('c', ['currency_id_offline'])
      ->condition('date', date("Y-m-d"), '=')
      ->execute()->fetchAll();

    if (count($result) > count($date_array)) {
      $con->delete('currency_offlne_data')
        ->condition('date', $date_array, 'NOT IN')
        ->execute();
    }

    // It the data is not presists so the data need to be inserted.
    if (count($result) < 2) {
      foreach ($options as $second => $svalue) {
        $amount = 1;
        $from = 'USD';
        $to = $second;
        $data = $service->collectingData($from, $to, $amount);
        // Matching the pattern of the dom element.
        preg_match("/<span class=bld>(.*)<\/span>/", $data, $currencycheck);
        $results = explode(" ", $currencycheck[1]);
        $rate = $results[0];
        $offdata = [
          'source_currency' => $from,
          'destination_currency' => $to,
          'price' => $rate,
          'date' => date("Y-m-d"),
        ];
        $con->insert('currency_offlne_data')->fields($offdata)->execute();
      }
    }
    // If the data is found so the table data of the particular date
    // will be updated.
    else {

      foreach ($options as $second => $scalue) {
        $amount = 1;
        $from = 'USD';
        $to = $second;
        $data = $service->collectingData($from, $to, $amount);
        // Matching the pattern of the dom element.
        preg_match("/<span class=bld>(.*)<\/span>/", $data, $currencycheck);
        $result = explode(" ", $currencycheck[1]);
        $rate = $result[0];
        $up = [
          'price' => $rate,
        ];
        $con->update('currency_offlne_data')->fields($up)
          ->condition('source_currency', $from, '=')
          ->condition('destination_currency', $to, '=')
          ->condition('date', date("Y-m-d"), '=')
          ->execute();
      }
    }
  }
}
